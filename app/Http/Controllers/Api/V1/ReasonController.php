<?php

namespace App\Http\Controllers\Api\V1;

use App\Classes\EndPointStaticRequestAnswer;
use App\Http\Controllers\Controller;
use App\Http\Resources\Reason\CellItemResource;
use App\Http\Resources\Reason\ReasonResource;
use App\Models\Manufacture\CellsGroup;
use App\Models\Manufacture\Reasons\Reason;
use App\Services\ReasonsService;
use Exception;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\AnonymousResourceCollection;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\ValidationException;

//use App\Http\Resources\Reason\ReasonResource;
//use Illuminate\Http\Request;

class ReasonController extends Controller
{
    /**
     * ___ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω
     * @return AnonymousResourceCollection|string
     */
    public function reasons()
    {
        try {
            return CellItemResource::collection(CellsGroup::query()->with('reasonCategories.reasons')->get());
        } catch (Exception $e) {
            return EndPointStaticRequestAnswer::fail($e);
        }
    }


    /**
     * ___ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –ø–æ id
     * @param Reason $reason
     * @return ReasonResource|string
     */
    public function reason(Reason $reason)
    {
        try {
            return new ReasonResource($reason);
        } catch (Exception $e) {
            return EndPointStaticRequestAnswer::fail($e);
        }
    }


    /**
     * ___ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ü—Ä–∏—á–∏–Ω—É
     * @param Request $request
     * @return string
     */
    public function store(Request $request)
    {
        try {
            // üåü –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä—è–º–æ –≤ –º–µ—Ç–æ–¥–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ üåü
            $validatedData = $request->validate([
                'data' => 'required|array',
                'data.name' => 'required|string|min:10|unique:reasons,name',
                'data.display_name' => 'nullable|string',
                'data.description' => 'nullable|string',
                'data.active' => 'boolean',
                'data.reason_category_id' => 'required|integer',
                'data.reason_number_in_reason_category' => 'required|integer',
            ], [
                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                'data.name.required' => '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.',
                'data.name.min' => '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è.',
                'data.name.unique' => '–ò–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.',
            ]);

            $data = $validatedData['data'];

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∏—á–∏–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            $orderNumbers = Reason::query()
                ->where('reason_category_id', $data['reason_category_id'])
                ->pluck('reason_number_in_reason_category')
                ->toArray();

            $firstFreeNumber = ReasonsService::findMinMissingNumber($orderNumbers);

            // üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö üöÄ
            $reason = Reason::query()->create([
                'name' => $data['name'],
                'display_name' => $data['name'],
                'description' => $data['description'],
                'active' => $data['active'],
                'reason_category_id' => $data['reason_category_id'],
                'reason_number_in_reason_category' => $firstFreeNumber,
            ]);

            //            $product = Reason::query()->create($validatedData);

            // ‚ú® –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç ‚ú®
            //            return response()->json([
            //                'message' => '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!',
            //                'product' => $product
            //            ], 201); // 201 Created - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞
            //            return new ReasonResource($reason);
            return EndPointStaticRequestAnswer::ok();
        } catch (ValidationException $e) {
            // ‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ‚ùå
            // Laravel –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ValidationException –≤ HTTP 422 Unprocessable Entity
            // –µ—Å–ª–∏ —ç—Ç–æ API-–∑–∞–ø—Ä–æ—Å, –Ω–æ —è–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–µ—Ç –±–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—è.
            //            return response()->json([
            //                'message' => '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.',
            //                'errors' => $e->errors()
            //            ], 422);
            return EndPointStaticRequestAnswer::fail($e);
        } catch (Exception $e) {
            // üíî –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ üíî
            //            return response()->json([
            //                'message' => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ' . $e->getMessage()
            //            ], 500); // 500 Internal Server Error
            return EndPointStaticRequestAnswer::fail($e);
        }

    }


    public function update(Request $request, Reason $reason)
    {
        try {
            // üåü –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä—è–º–æ –≤ –º–µ—Ç–æ–¥–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ üåü
            $validatedData = $request->validate([
                'data' => 'required|array',
                'data.name' => 'required|string|min:10|unique:reasons,name',
                'data.display_name' => 'nullable|string',
                'data.description' => 'nullable|string',
                'data.active' => 'boolean',
                'data.reason_category_id' => 'required|integer',
                'data.reason_number_in_reason_category' => 'required|integer',
            ], [
                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                'data.name.required' => '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.',
                'data.name.min' => '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è.',
                'data.name.unique' => '–ò–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.',
            ]);

            $data = $validatedData['data'];

            $reason->update([
                'name' => $data['name'],
                'display_name' => $data['name'],
                'description' => $data['description'],
                'active' => $data['active'],
                //                'reason_category_id' => $data['reason_category_id'],
                //                'reason_number_in_reason_category' => $data['reason_category_id'],
            ]);

            //            // ‚ú® –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç ‚ú®
            //            return response()->json([
            //                'message' => '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!',
            //                'product' => $product
            //            ], 200); // 200 OK - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞

            return EndPointStaticRequestAnswer::ok();
        } catch (ValidationException $e) {
            // ‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ‚ùå
            // Laravel –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ValidationException –≤ HTTP 422 Unprocessable Entity
            // –µ—Å–ª–∏ —ç—Ç–æ API-–∑–∞–ø—Ä–æ—Å, –Ω–æ —è–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–µ—Ç –±–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—è.
            //            return response()->json([
            //                'message' => '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.',
            //                'errors' => $e->errors()
            //            ], 422);
            return EndPointStaticRequestAnswer::fail($e);
        } catch (Exception $e) {
            // üíî –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ üíî
            //            return response()->json([
            //                'message' => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ' . $e->getMessage()
            //            ], 500); // 500 Internal Server Error
            return EndPointStaticRequestAnswer::fail($e);
        }


    }

    /**
     * ___ –£–¥–∞–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É
     * @param Reason $reason
     * @return string
     */
    public
    function delete(Reason $reason)
    {
        try {
            $reason->delete();
            return EndPointStaticRequestAnswer::ok();
        } catch (Exception $e) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
            return EndPointStaticRequestAnswer::fail($e);
        }
    }


    /**
     * ___ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω –ø–æ –ì—Ä—É–ø–ø–µ –ü–Ø –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     * @param Request $request
     * @param string|null $cellsGroupId ID –≥—Ä—É–ø–ø—ã —è—á–µ–µ–∫ (–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞, –º–æ–∂–µ—Ç –±—ã—Ç—å null –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
     * @param string|null $reasonsCategoryId ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏—á–∏–Ω (–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞, –º–æ–∂–µ—Ç –±—ã—Ç—å null –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)
     * @return JsonResponse|AnonymousResourceCollection|string
     */
    public function getReasonsByCellsGroupAndReasonCategory(
        Request $request,
        string  $cellsGroupId = null,
        string  $reasonsCategoryId = null
    )
    {
        // return ['answer' => [
        // 'cellsGroupId' => $cellsGroupId,
        //  'reasonsCategoryId' => $reasonsCategoryId,
        // ]];


        try {
            // --- 1. –†—É—á–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞—Å–∞–¥ Validator –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –≤—Ä—É—á–Ω—É—é,
            // —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
            $validator = Validator::make([
                'cellsGroupId' => $cellsGroupId,
                'reasonsCategoryId' => $reasonsCategoryId,
            ], [
                'cellsGroupId' => [
                    'required',     // –ü–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
                    'integer',      // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
                    'min:1',        // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º
                ],
                'reasonsCategoryId' => [
                    'required',
                    'integer',
                    'min:1',
                ],
            ]);

            // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –±–∞–∑–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º (—Ç–∏–ø, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, min) –Ω–µ –ø—Ä–æ—à–ª–∞
            if ($validator->fails()) {
                return response()->json([
                    'message' => 'Invalid parameters provided.',
                    'data' => [], // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
                    'errors' => $validator->errors(), // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –≤–µ—Ä–Ω—É—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                ], 200); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK, –Ω–æ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            }

            // --- 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
            // –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –º—ã –∑–Ω–∞–µ–º, —á—Ç–æ cellsGroupId –∏ reasonsCategoryId - —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞,
            // –∏—â–µ–º –∏—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
            $reasons = Reason::query()->whereHas('reasonCategory', function ($query) use ($reasonsCategoryId, $cellsGroupId) {
                // 1. –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∏—Ö —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º—É ID
                $query->where('id', $reasonsCategoryId)
                    // 2. –ò –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ
                    ->whereHas('cellsGroup', function ($subQuery) use ($cellsGroupId) {
                        $subQuery->where('id', $cellsGroupId);
                    });
            })->get();

            // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
            if ($reasons->isEmpty()) {
                return response()->json([
                    'message' => 'One or both entities not found in the database.',
                    'data' => [], // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö
                ], 200); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 200 OK, –Ω–æ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            }

            return ReasonResource::collection($reasons);
        } catch (Exception $e) {
            return EndPointStaticRequestAnswer::fail($e);
        }

    }


    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—ã –ø–æ ID –≥—Ä—É–ø–ø—ã —è—á–µ–µ–∫ –∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏—á–∏–Ω.
     * /*
     * public function getReasonsByCellsGroupAndReasonCategory(Request $request, $cellsGroupId, $reasonsCategoryId)
     * {
     * // --- 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
     * // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é Laravel –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ –∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤ –ë–î.
     * $request->validate([
     * 'cellsGroupId' => [
     * 'required',     // –ü–∞—Ä–∞–º–µ—Ç—Ä –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
     * 'integer',      // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º
     * 'min:1',        // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º
     * Rule::exists('cells_groups', 'id'), // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ—Ç ID –≤ —Ç–∞–±–ª–∏—Ü–µ 'cells_groups'
     * ],
     * 'reasonsCategoryId' => [
     * 'required',
     * 'integer',
     * 'min:1',
     * Rule::exists('reason_categories', 'id'), // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —ç—Ç–æ—Ç ID –≤ —Ç–∞–±–ª–∏—Ü–µ 'reason_categories'
     * ],
     * ]);
     *
     * // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞, Laravel –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–æ—Å–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
     * // –∏ –≤–µ—Ä–Ω–µ—Ç JSON-–æ—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–∞–º–∏ 422 Unprocessable Entity.
     * // –î–∞–ª—å–Ω–µ–π—à–∏–π –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
     *
     * // --- 2. –ü–æ–∏—Å–∫ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º ID ---
     * // –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ cellsGroupId –∏ reasonsCategoryId —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –ë–î.
     * $cellsGroup = CellsGroup::find($cellsGroupId);
     * $reasonCategory = ReasonCategory::find($reasonsCategoryId);
     *
     * // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ö–æ—Ç—è Rule::exists —É–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∏—Ö –Ω–∞–ª–∏—á–∏–µ)
     * // –≠—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã, –µ—Å–ª–∏ –≤—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Rule::exists
     * // –∏–ª–∏ –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ".
     * if (!$cellsGroup) {
     * return response()->json([
     * 'message' => 'Cells Group not found.' // –ì—Ä—É–ø–ø–∞ —è—á–µ–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ Rule::exists, –µ—Å–ª–∏ –ª–æ–≥–∏–∫–∞ —Å–ª–æ–∂–Ω–µ–µ)
     * ], 404);
     * }
     *
     * if (!$reasonCategory) {
     * return response()->json([
     * 'message' => 'Reason Category not found.' // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø—Ä–∏—á–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
     * ], 404);
     * }
     *
     * // --- 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ ---
     * // –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å $cellsGroup –∏ $reasonCategory, –∏ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö.
     * // –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–∏—á–∏–Ω—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –≥—Ä—É–ø–ø–æ–π —è—á–µ–µ–∫ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π.
     *
     * // –ü—Ä–∏–º–µ—Ä: –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±–µ–∏–º–∏ —Å—É—â–Ω–æ—Å—Ç—è–º–∏
     * // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —É –≤–∞—Å –µ—Å—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è –≤ –º–æ–¥–µ–ª—è—Ö
     * $reasons = $cellsGroup->reasons() // –ï—Å–ª–∏ CellsGroup –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–µ hasMany/belongsToMany –∫ Reason
     * ->where('reason_category_id', $reasonsCategoryId)
     * ->get();
     *
     * // –ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä—è–º—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π, –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é –≤ –º–æ–¥–µ–ª–∏ Reason:
     * // $reasons = Reason::where('cells_group_id', $cellsGroupId)
     * //                  ->where('reason_category_id', $reasonsCategoryId)
     * //                  ->get();
     *
     * // --- 4. –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ---
     * // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.
     * return response()->json([
     * 'message' => 'Reasons retrieved successfully.',
     * 'cells_group' => $cellsGroup,
     * 'reason_category' => $reasonCategory,
     * 'reasons' => $reasons,
     * ]);
     * }
     */


}
