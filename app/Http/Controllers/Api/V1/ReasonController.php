<?php

namespace App\Http\Controllers\Api\V1;

use App\Classes\EndPointStaticRequestAnswer;
use App\Http\Controllers\Controller;
use App\Http\Resources\Reason\CellItemResource;
use App\Http\Resources\Reason\ReasonResource;
use App\Models\Manufacture\CellsGroup;
use App\Models\Manufacture\Reasons\Reason;
use App\Services\ReasonsService;
use Exception;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\AnonymousResourceCollection;
use Illuminate\Validation\ValidationException;

//use App\Http\Resources\Reason\ReasonResource;
//use Illuminate\Http\Request;

class ReasonController extends Controller
{
    /**
     * ___ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω
     * @return AnonymousResourceCollection|string
     */
    public function reasons()
    {
        try {
            return CellItemResource::collection(CellsGroup::query()->with('reasonCategories.reasons')->get());
        } catch (Exception $e) {
            return EndPointStaticRequestAnswer::fail($e);
        }
    }


    /**
     * ___ –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –ø–æ id
     * @param Reason $reason
     * @return ReasonResource|string
     */
    public function reason(Reason $reason)
    {
        try {
            return new ReasonResource($reason);
        } catch (Exception $e) {
            return EndPointStaticRequestAnswer::fail($e);
        }
    }


    /**
     * ___ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ü—Ä–∏—á–∏–Ω—É
     * @param Request $request
     * @return string
     */
    public function store(Request $request)
    {
        try {
            // üåü –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä—è–º–æ –≤ –º–µ—Ç–æ–¥–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ üåü
            $validatedData = $request->validate([
                'data' => 'required|array',
                'data.name' => 'required|string|min:10|unique:reasons,name',
                'data.display_name' => 'nullable|string',
                'data.description' => 'nullable|string',
                'data.active' => 'boolean',
                'data.reason_category_id' => 'required|integer',
                'data.reason_number_in_reason_category' => 'required|integer',
            ], [
                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                'data.name.required' => '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.',
                'data.name.min' => '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è.',
                'data.name.unique' => '–ò–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.',
            ]);

            $data = $validatedData['data'];

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∏—á–∏–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            $orderNumbers = Reason::query()
                ->where('reason_category_id', $data['reason_category_id'])
                ->pluck('reason_number_in_reason_category')
                ->toArray();

            $firstFreeNumber = ReasonsService::findMinMissingNumber($orderNumbers);

            // üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö üöÄ
            $reason = Reason::query()->create([
                'name' => $data['name'],
                'display_name' => $data['name'],
                'description' => $data['description'],
                'active' => $data['active'],
                'reason_category_id' => $data['reason_category_id'],
                'reason_number_in_reason_category' => $firstFreeNumber,
            ]);

            //            $product = Reason::query()->create($validatedData);

            // ‚ú® –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç ‚ú®
            //            return response()->json([
            //                'message' => '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!',
            //                'product' => $product
            //            ], 201); // 201 Created - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞
            //            return new ReasonResource($reason);
            return EndPointStaticRequestAnswer::ok();
        } catch (ValidationException $e) {
            // ‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ‚ùå
            // Laravel –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ValidationException –≤ HTTP 422 Unprocessable Entity
            // –µ—Å–ª–∏ —ç—Ç–æ API-–∑–∞–ø—Ä–æ—Å, –Ω–æ —è–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–µ—Ç –±–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—è.
            //            return response()->json([
            //                'message' => '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.',
            //                'errors' => $e->errors()
            //            ], 422);
            return EndPointStaticRequestAnswer::fail($e);
        } catch (Exception $e) {
            // üíî –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ üíî
            //            return response()->json([
            //                'message' => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ' . $e->getMessage()
            //            ], 500); // 500 Internal Server Error
            return EndPointStaticRequestAnswer::fail($e);
        }

    }


    public function update(Request $request, Reason $reason)
    {
        try {
            // üåü –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä—è–º–æ –≤ –º–µ—Ç–æ–¥–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ üåü
            $validatedData = $request->validate([
                'data' => 'required|array',
                'data.name' => 'required|string|min:10|unique:reasons,name',
                'data.display_name' => 'nullable|string',
                'data.description' => 'nullable|string',
                'data.active' => 'boolean',
                'data.reason_category_id' => 'required|integer',
                'data.reason_number_in_reason_category' => 'required|integer',
            ], [
                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                'data.name.required' => '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.',
                'data.name.min' => '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è.',
                'data.name.unique' => '–ò–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.',
            ]);

            $data = $validatedData['data'];

            $reason->update([
                'name' => $data['name'],
                'display_name' => $data['name'],
                'description' => $data['description'],
                'active' => $data['active'],
                //                'reason_category_id' => $data['reason_category_id'],
                //                'reason_number_in_reason_category' => $data['reason_category_id'],
            ]);

            //            // ‚ú® –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç ‚ú®
            //            return response()->json([
            //                'message' => '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!',
            //                'product' => $product
            //            ], 200); // 200 OK - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–¥ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞

            return EndPointStaticRequestAnswer::ok();
        } catch (ValidationException $e) {
            // ‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ‚ùå
            // Laravel –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç ValidationException –≤ HTTP 422 Unprocessable Entity
            // –µ—Å–ª–∏ —ç—Ç–æ API-–∑–∞–ø—Ä–æ—Å, –Ω–æ —è–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–µ—Ç –±–æ–ª—å—à–µ –∫–æ–Ω—Ç—Ä–æ–ª—è.
            //            return response()->json([
            //                'message' => '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.',
            //                'errors' => $e->errors()
            //            ], 422);
            return EndPointStaticRequestAnswer::fail($e);
        } catch (Exception $e) {
            // üíî –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫ üíî
            //            return response()->json([
            //                'message' => '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞: ' . $e->getMessage()
            //            ], 500); // 500 Internal Server Error
            return EndPointStaticRequestAnswer::fail($e);
        }


    }

    /**
     * ___ –£–¥–∞–ª—è–µ–º –ø—Ä–∏—á–∏–Ω—É
     * @param Reason $reason
     * @return string
     */
    public
    function delete(Reason $reason)
    {
        try {
            $reason->delete();
            return EndPointStaticRequestAnswer::ok();
        } catch (Exception $e) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
            return EndPointStaticRequestAnswer::fail($e);
        }
    }

}
